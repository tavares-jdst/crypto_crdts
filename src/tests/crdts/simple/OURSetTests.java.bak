package tests.crdts.simple;

import crdts.simple.OURSet;
import org.junit.Test;

import java.util.UUID;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

public class OURSetTests {

    @Test
    public void testLookup() {
        OURSet<String> ourSet = new OURSet<>();

        final OURSet.ElementState<String> ape = new OURSet.ElementState<>(UUID.randomUUID(), System.currentTimeMillis(), "ape");
        final OURSet.ElementState<String> dog = new OURSet.ElementState<>(UUID.randomUUID(), System.currentTimeMillis(), "dog");
        final OURSet.ElementState<String> cat = new OURSet.ElementState<>(UUID.randomUUID(), System.currentTimeMillis(), "cat");

        try {
            Thread.sleep(500);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        final OURSet.ElementState<String> cat2 = new OURSet.ElementState<>(UUID.randomUUID(), System.currentTimeMillis(), "cat");

        assertTrue(cat.getId()!=cat2.getId());

        ourSet.add(ape.getId(), ape.getTimestamp(), ape.getValue());
        ourSet.add(dog.getId(), dog.getTimestamp(), dog.getValue());
        ourSet.add(cat.getId(), cat.getTimestamp(), cat.getValue());
        ourSet.add(cat2.getId(), cat2.getTimestamp(), cat2.getValue());

        System.out.println("Before:");
        System.out.println("Cat 1 id="+cat.getId()+" ts="+cat.getTimestamp());
        System.out.println("Cat 2 "+cat2.getId()+" ts="+cat2.getTimestamp());
        System.out.println(ourSet.getElements().toString());
        System.out.println(ourSet.lookup());

        long ts = System.currentTimeMillis();
        System.out.println(ts);

        ourSet.remove(UUID.randomUUID(), System.currentTimeMillis(), "tiger");
        ourSet.remove(cat.getId(), ts + 1, cat.getValue());

        System.out.println("After:");
        System.out.println(ourSet.getElements().toString());
        System.out.println(ourSet.lookup());

        // Actual test
        assertEquals(2,ourSet.size() );
        assertTrue(ourSet.contains("dog"));
        assertTrue(ourSet.contains("ape"));
        assertFalse(ourSet.contains("cat"));
    }

    @Test
    public void testMerge() {

        final OURSet.ElementState<String> ape = new OURSet.ElementState<>(UUID.randomUUID(), System.currentTimeMillis(), "ape");
        final OURSet.ElementState<String> dog = new OURSet.ElementState<>(UUID.randomUUID(), System.currentTimeMillis(), "dog");
        final OURSet.ElementState<String> cat = new OURSet.ElementState<>(UUID.randomUUID(), System.currentTimeMillis(), "cat");
        final OURSet.ElementState<String> tiger = new OURSet.ElementState<>(UUID.randomUUID(), System.currentTimeMillis(), "tiger");

        OURSet<String> firstOURSet = new OURSet<>();

        firstOURSet.add(ape.getId(), ape.getTimestamp(), ape.getValue());
        firstOURSet.add(dog.getId(), dog.getTimestamp(), dog.getValue());
        firstOURSet.remove(cat.getId(), cat.getTimestamp()+1, cat.getValue());

        OURSet<String> secondOURSet = new OURSet<>();
        secondOURSet.add(cat.getId(), cat.getTimestamp(), cat.getValue());
        secondOURSet.add(tiger.getId(), tiger.getTimestamp(), tiger.getValue());

        // Actual test
        OURSet<String> mergeResult = firstOURSet.merge(secondOURSet);

        assertEquals(mergeResult.size(), 3);
        assertTrue(mergeResult.contains(ape.getValue()));
        assertTrue(mergeResult.contains(dog.getValue()));
        assertTrue(mergeResult.contains(tiger.getValue()));
        assertFalse(mergeResult.contains(cat.getValue()));

        OURSet<String> reverseMergeResult = secondOURSet.merge(firstOURSet);
        assertEquals("'merge' should be symmetrical", mergeResult, reverseMergeResult);
    }


}
